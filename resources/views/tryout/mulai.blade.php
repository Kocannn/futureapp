<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mulai Tryout</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .prose p {
            margin-bottom: 1rem;
            line-height: 1.6;
        }
        .soal-item {
            display: none;
        }
        .soal-item.active {
            display: block;
        }
        .nav-soal-btn.active {
            border-color: #f59e0b;
            background-color: #fffbeb;
            color: #b45309;
        }
        .nav-soal-btn.answered {
            border-color: #3b82f6;
            background-color: #dbeafe;
            color: #1d4ed8;
        }
        .jawaban-radio:checked + div span:first-child {
            background-color: #3b82f6;
            color: white;
        }
        .pulse {
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
            100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0); }
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header Section -->
    <div class="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <a href="{{route('dashboard')}}" class="inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                        Kembali
                    </a>
                    <div class="h-6 w-px bg-gray-300"></div>
                    <div>
                        <h1 class="text-xl font-semibold text-gray-900">{{ $paket->nama }}</h1>
                        <p class="text-sm text-gray-500">{{ count($paket->soals) }} Soal</p>
                    </div>
                </div>

                <!-- Timer -->
                <div class="flex items-center space-x-4">
                    <div class="bg-red-50 border border-red-200 rounded-lg px-4 py-2 pulse">
                        <div class="flex items-center space-x-2">
                            <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3"></path>
                            </svg>
                            <span class="text-lg font-mono font-semibold text-red-700" id="timer">{{ $paket->durasi }}:00</span>
                        </div>
                        <p class="text-xs text-red-600 mt-1">Waktu tersisa</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <form id="tryout-form" action="{{ route('tryout.submit', $paket->id) }}" method="POST">
            @csrf
            <input type="hidden" id="waktu-habis" name="waktu_habis" value="0">
            <input type="hidden" name="paket_id" value="{{ $paket->id }}">

            <div class="grid lg:grid-cols-4 gap-6">
                <!-- Question Navigation Sidebar -->
                <div class="lg:col-span-1">
                    <div class="bg-white rounded-xl border border-gray-200 p-6 sticky top-24">
                        <h3 class="font-semibold text-gray-900 mb-4 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                            Navigasi Soal
                        </h3>

                        <div class="grid grid-cols-5 gap-2 mb-6" id="question-nav">
                            <!-- Buttons will be generated by JavaScript -->
                        </div>

                        <!-- Progress Info -->
                        <div class="border-t border-gray-200 pt-4">
                            <div class="flex justify-between text-sm text-gray-600 mb-2">
                                <span>Progress</span>
                                <span id="progress-text">0/{{ count($paket->soals) }}</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2">
                                <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" id="progress-bar" style="width: 0%"></div>
                            </div>
                        </div>

                        <!-- Legend -->
                        <div class="mt-4 space-y-2 text-xs">
                            <div class="flex items-center space-x-2">
                                <div class="w-4 h-4 rounded border-2 border-gray-200 bg-white"></div>
                                <span class="text-gray-600">Belum dijawab</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <div class="w-4 h-4 rounded border-2 border-blue-500 bg-blue-50"></div>
                                <span class="text-gray-600">Sudah dijawab</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <div class="w-4 h-4 rounded border-2 border-amber-500 bg-amber-50"></div>
                                <span class="text-gray-600">Sedang dikerjakan</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Question Content -->
                <div class="lg:col-span-3" id="questions-container">
                    <!-- Questions will be generated by JavaScript -->
                </div>
            </div>
        </form>
    </div>

    <!-- Confirmation Modal -->
    <div id="submit-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-xl p-6 max-w-md mx-4">
            <div class="flex items-center mb-4">
                <div class="w-10 h-10 bg-amber-100 rounded-full flex items-center justify-center mr-3">
                    <svg class="w-6 h-6 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900">Konfirmasi Submit</h3>
            </div>
            <p class="text-gray-600 mb-6">Apakah Anda yakin ingin submit jawaban? Setelah submit, Anda tidak dapat mengubah jawaban lagi.</p>
            <div class="flex space-x-3">
                <button type="button" id="cancel-submit" class="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50">
                    Batal
                </button>
                <button type="button" id="confirm-submit" class="flex-1 px-4 py-2 bg-green-600 border border-transparent rounded-lg text-sm font-medium text-white hover:bg-green-700">
                    Ya, Submit
                </button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Get questions from server data
            const questions = @json($paket->soals);

            // Generate navigation buttons
            const navContainer = document.getElementById('question-nav');
            questions.forEach((question, index) => {
                const button = document.createElement('button');
                button.type = 'button';
                button.className = 'nav-soal-btn w-10 h-10 rounded-lg border-2 border-gray-200 bg-white text-sm font-medium text-gray-700 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2';
                button.dataset.index = index;
                button.textContent = index + 1;
                navContainer.appendChild(button);
            });

// Generate question content
            const questionsContainer = document.getElementById('questions-container');
            questions.forEach((question, index) => {
                const questionDiv = document.createElement('div');
                questionDiv.className = `soal-item bg-white rounded-xl border border-gray-200 p-8 ${index === 0 ? 'active' : ''}`;
                questionDiv.dataset.index = index;
                questionDiv.innerHTML = `
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center space-x-3">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                <span class="text-sm font-semibold text-blue-700">${index + 1}</span>
                            </div>
                            <h2 class="text-lg font-semibold text-gray-900">Soal ${index + 1}</h2>
                        </div>
                        <span class="text-sm text-gray-500">${index + 1} dari ${questions.length}</span>
                    </div>

                    <div class="mb-8">
<p class="text-gray-800 leading-relaxed text-base mb-4">
    ${question.pertanyaan}
</p>

${question.tables ? (() => {
    try {
        const tableData = JSON.parse(question.tables);
        const headers = tableData.headers.map(h => `<th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-600 uppercase tracking-wider border-b">${h}</th>`).join('');
        const rows = tableData.rows.map((row, rowIndex) =>
            `<tr class="${rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
                ${row.map(col => `<td class="px-4 py-3 text-sm text-gray-700 border-b border-gray-200">${col}</td>`).join('')}
            </tr>`
        ).join('');

        return `
            <div class="overflow-x-auto mt-4 mb-6 rounded-lg border border-gray-200 shadow-sm">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>${headers}</tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        ${rows}
                    </tbody>
                </table>
            </div>
        `;
    } catch (e) {
        return `<p class="text-red-500 mt-2">Gagal memuat tabel</p>`;
    }
})() : ''}
                    </div>

                    <div class="space-y-3 mb-8" id="options-${index}">
                        ${[
                            ['A', question.pilihan_a],
                            ['B', question.pilihan_b],
                            ['C', question.pilihan_c],
                            ['D', question.pilihan_d],
                            ['E', question.pilihan_e]
                        ].map(([key, value]) => `
                            <label class="flex items-start space-x-3 p-4 rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 cursor-pointer transition-all duration-200 group">
                                <input class="jawaban-radio mt-1 w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                                       type="radio"
                                       name="jawaban-${question.id}"
                                       value="${key}"
                                       data-question-index="${index}">
                                <div class="flex-1">
                                    <div class="flex items-center space-x-2">
                                        <span class="w-6 h-6 bg-gray-100 group-hover:bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium text-gray-700 group-hover:text-blue-700">
                                            ${key}
                                        </span>
                                        <span class="text-gray-800 group-hover:text-gray-900">${value}</span>
                                    </div>
                                </div>
                            </label>
                        `).join('')}
                    </div>

                    <div class="flex items-center justify-between pt-6 border-t border-gray-200">
                        <button type="button"
                                class="prev-btn inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors ${index === 0 ? 'opacity-50 cursor-not-allowed' : ''}"
                                ${index === 0 ? 'disabled' : ''}>
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                            Sebelumnya
                        </button>

                        <button type="button"
                                class="next-btn inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-lg text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors ${index === questions.length - 1 ? 'hidden' : ''}">
                            Selanjutnya
                            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </button>
                    </div>
                `;
                questionsContainer.appendChild(questionDiv);
            });

            // Add submit section
            const submitSection = document.createElement('div');
            submitSection.className = 'mt-8 bg-white rounded-xl border border-gray-200 p-6';
            submitSection.innerHTML = `
                <div class="text-center">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Selesai Mengerjakan?</h3>
                    <p class="text-gray-600 mb-6">Pastikan semua jawaban sudah terisi sebelum submit.</p>
                    <button type="button" id="show-submit-modal"
                            class="inline-flex items-center px-6 py-3 bg-green-600 border border-transparent rounded-lg text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Submit Jawaban
                    </button>
                </div>
            `;
            questionsContainer.appendChild(submitSection);

            // Timer functionality
            let waktu = {{ $paket->durasi * 60 }}; // Convert minutes to seconds
            const timerDisplay = document.getElementById('timer');
            const waktuHabisInput = document.getElementById('waktu-habis');
            let timerInterval;

            function updateTimer() {
                const menit = Math.floor(waktu / 60);
                const detik = waktu % 60;
                timerDisplay.textContent = `${menit.toString().padStart(2, '0')}:${detik.toString().padStart(2, '0')}`;

                if (waktu <= 300) { // 5 minutes
                    timerDisplay.parentElement.parentElement.classList.add('pulse');
                    timerDisplay.classList.add('text-red-800');
                }

                if (waktu <= 0) {
                    clearInterval(timerInterval);
                    alert('Waktu pengerjaan sudah habis! Soal akan disubmit otomatis.');
                    waktuHabisInput.value = 1;
                    document.getElementById('tryout-form').submit();
                } else {
                    waktu--;
                }
            }

            timerInterval = setInterval(updateTimer, 1000);
            updateTimer(); // Initial call

            // Question navigation
            let currentQuestion = 0;
            const answeredQuestions = new Set();
            const progressBar = document.getElementById('progress-bar');
            const progressText = document.getElementById('progress-text');

            function showQuestion(index) {
                // Hide all questions
                document.querySelectorAll('.soal-item').forEach(item => {
                    item.classList.remove('active');
                });

                // Show target question
                document.querySelector(`.soal-item[data-index="${index}"]`).classList.add('active');

                // Update navigation buttons
                document.querySelectorAll('.nav-soal-btn').forEach(btn => {
                    btn.classList.remove('active', 'answered');
                    const btnIndex = parseInt(btn.dataset.index);

                    if (btnIndex === index) {
                        btn.classList.add('active');
                    }

                    if (answeredQuestions.has(btnIndex)) {
                        btn.classList.add('answered');
                    }
                });

                currentQuestion = index;
            }

            // Navigation button click
            document.querySelectorAll('.nav-soal-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const index = parseInt(button.dataset.index);
                    showQuestion(index);
                });
            });

            // Next button
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('next-btn') || e.target.closest('.next-btn')) {
                    if (currentQuestion < questions.length - 1) {
                        showQuestion(currentQuestion + 1);
                    }
                }

                if (e.target.classList.contains('prev-btn') || e.target.closest('.prev-btn')) {
                    if (currentQuestion > 0) {
                        showQuestion(currentQuestion - 1);
                    }
                }
            });

            // Answer selection
            document.addEventListener('change', (e) => {
                if (e.target.classList.contains('jawaban-radio')) {
                    const questionIndex = parseInt(e.target.dataset.questionIndex);
                    answeredQuestions.add(questionIndex);

                    // Update progress
                    const progress = (answeredQuestions.size / questions.length) * 100;
                    progressBar.style.width = `${progress}%`;
                    progressText.textContent = `${answeredQuestions.size}/${questions.length}`;

                    // Update navigation button
                    document.querySelector(`.nav-soal-btn[data-index="${questionIndex}"]`).classList.add('answered');
                }
            });

            // Submit modal
            const submitModal = document.getElementById('submit-modal');
            const cancelSubmit = document.getElementById('cancel-submit');
            const confirmSubmit = document.getElementById('confirm-submit');

            document.getElementById('show-submit-modal').addEventListener('click', () => {
                submitModal.classList.remove('hidden');
                submitModal.classList.add('flex');
            });

            cancelSubmit.addEventListener('click', () => {
                submitModal.classList.add('hidden');
                submitModal.classList.remove('flex');
            });

            confirmSubmit.addEventListener('click', () => {
                // Remove the alert as it's unnecessary with the form submission
                // alert('Jawaban berhasil disubmit!');

                // Actually submit the form
                document.getElementById('tryout-form').submit();
            });

            // Keyboard navigation
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowRight' && currentQuestion < questions.length - 1) {
                    showQuestion(currentQuestion + 1);
                } else if (e.key === 'ArrowLeft' && currentQuestion > 0) {
                    showQuestion(currentQuestion - 1);
                }
            });
        });
    </script>
</body>
</html>
